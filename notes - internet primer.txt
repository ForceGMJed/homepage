==========ipv4=========

256.256.256.256

0-255 seperated by .

8bit per number => 32 bits total!

around 4B unique device possible




==========ipv6=========

ffff:ffff:Ffff:Ffff:Ffff:Ffff:ffff:ffff


16 bit => 4 digit long heximals 

0-f => 4 bit required

(0-f)(0-f)(0-f)(0-f): ... 

will be 16 bits each

total of 128 bit , 2^128 ~ 3.4E38 unique devices!!!!


========DHCP=========

dynamic host configuration protocol

assign u a ip address when u connect to the internet


=======dns=========
ip address <=> url


host		|ip address
google.com	|74.125.202.138
.....


big dns server aggregate smaller sets of dns info,updating frequently



=========accessPoints===========

device ip is not the same as the public ip address where internet connects to

device connects to router and router use its public ip address to communitcate
with the internet 

all device connnected to the same router will use the same ip adderess ato connect 
to the internet( the roiuters ip address)



===========IP=============

Small networks can have routers physcailly connected by wires.

but in large scale, routers are connect to bigger routers that are connected to
event bigger routers.



n.x.x.x

let n be 1,
the 1 can be a hub of all 1.x.x.x address, everything that has a 1.x.x.x address tag will be sent
to the 1 hub, everything that is not 1 will be send away from the 1 hub.


CHECK SLIDES FOR SCHEMATIC



IP ALSO break info into small packets.


more route to the same destination:

avoid traffic


what happen if we do drop a packet>??????


====TCP=======

mutliple programe in the same machine!!!

TCP allow a local route inside the receiving machine.

IP:tCP

email is 25 
web secure is 443 

if u send email: it will go out thro the port 25 and in port 25 in the target machine 

garantees delivery:

it has info how many packets the data has been split into

X OF TOTAL

it stacks :

target IP
port/ 1 of 4
<data>


when reciever check for its ip,
unwarp the first layer, confirm the port, 
put the data in the relative location.

tcp may not send data in order because traffic and route are
not garrenteed in order


1of4 -> 3of4 -> 4of4 -> 2???

if 2 of 4 is missing,  will request sender to send back 
the 2 of 4 ONLY!


========HTTP=========

When u request a webpage: u will send a request like this:

GET/HTTP/1.1
Host: cats.com/
...

use the protocal http1.1, i want cats.com/


the response will be:

HTTP/1.1 200 OK 
Content-type: text/html
.....
i also speak http/1.1, ur request is approved (code: 200)
you are about to recieve a html


IF WE ASK FOR A PATH THAT DOESNT EXIST ON THE DOAMIN:

GET /cats.html HTTP/1.1
Host: cats.com


the response will be:

HTTP/1.1 404 NOT FOUND
Content-type: text/html


==========javascript========

LOCAL! when u load website the javascript it executed locally!

no type specifer

--global variable:

x =44;

--local variable:

var x = 44;



--conditionals same as C
loops same as C and more!

--functions:

function func(){
}

those functions where it is bound to html can have no name- more later.


---arrays:

var nums= [0,2,3,4,5];
var mixed = [1,true,3.333,"fives"] 

WTF

--OBJECTS:

like structs that have fields 

but can have functions inside , A CLASS!

Obj.func();

====object fields=====

struct car{
int year;
char model[10];
}

in C:

struct car car1;

car1.year = 1111;
car1.model ="gg";


but in JS:

objects are similar to dictionary in python:

var car1 = {year:1291, model:"ss"};

remember NO NEED TO CAST TYPE IN JS WTF


====LOOPing over key value pairs of an obj(or arrays)=====

for (var key in obj)
{
	//obj[key] returns the value of key
}


for (var key of obj)
{
	//key returns the value of key
}



example:

var wkarry=["mon","tue","wed","thur"]

for(var day of wkarry)
{
	console.log(day);
}

output:

mon
tue
wed
thur

the value is returned!
//////////////////

for(var day in wkarry)
{
	console.log(day);
}

output:

0
1
2
3

the index is returned!
//////////////////////

for(var day in wkarry)
{
	console.log(wkarry[day]+" is day number " + (day+1) +" of the week!");
}

//here the day is ambigious because concatonation doesnt treat it as a variable day but as a string
//the + operator between day and 1 is also ambigious with the concatonation "+" opoerator

solutiuon:

console.log(wkarry[day]+" is day number " + (parseInt(day)+1) +" of the week!");

array are special case of objects:

array.size()
.pop
.push(x)
.shift()

.map??????????????


===========arr.map()==============

- apply a function to every element in the array.
- anonymous function can be used here


var nums = [1,2,3,4,5];

nums = nums.map(function(num){

return num*2;

}

//no function name is given
//this will *2 to every number inside the array
//num here is the local variable where this anonymous function will take for all its elements.




=====events=====
many elemetns in html have event support :

<body>

	<button onclick="alertName(event)"> button 1 </button>
</body>

event here is the argument passed in when the event is called by the event handler,

like c# event handler, or unity events, the listener delegate must also accept the same 
argument type.


function alertName(e)
{
	var trigger = event.srcElement;
	alert(" you clicked on "+ trigger.innerHTML);
}

event.srcElement returns the element that called the event.

innerHTML of that element will be "button1" ( whats between that element's start and close tag)


========DOM=========


DOCUMNET OBJECT MODEL


<html>
	<head>
		<title>Hello,world</title>
	</head>
	<body>
		<h2>MY page</h2>
		<p>World, hello</p>
		<a href="test.html">Link</a>
	</body>
</html>


each indentation means a hierarchy!

each documnet object has a number of properties and a number of methods
that can be used.

setting these properties/calling methods, can change content of the page without 
refreshing!

example: in F12 in webpage browser:

in the console tab, type:

console.dir(document);

#document consist of the children property,
inside this children property theres a html property,
inside html, theres is a chidren property call head and body.......


F12 can reveal the structure of the html file!!!!!!!!!!!!!!!!!!!

===DOM PROPERTIES===
DOM PROPERTIES		DESC
innerHTML		holds the html inside a set of tags
nodeName 		the name of an html element or elements attribute
id	 		The "id" attribute of an HTML element
parentNode 		a ref to the node one level up in the dom
childNodes		an array of ref to the nodes 1 level down in dom
attributes		an array of attributes of an HTML element
style			an object encapsulating the css html stling of an elemnet



DOM METHODS			DESC
getElementById(id)		get th...
getElementsByTagName(tag)	get all elemenet swith the given tag below this point in the dom
appendChild(node)		add the given node to the dom below this point
removeChild(node)		remove the specified child node from the DOM.

can find any ppiece of the webpage using dom properties and methods



======jquery=========
client side scripting


example:

document.getElementById("colorDiv").style.backgroundColor = "green";

using jquery:

$("colorDiv").css("background-color","green);


example:

change background at buttone press:


<div id='colorDiv'>
CHANGE ME COLOR

</div>

////////////

1) individual functions

<div>
	<button onclick="turnPurple();">purple</button>
	<button onclick="turnGreen();">green</button>
</div>

include this script:

function turnPurple()
{
	document.getElementById('colorDiv').style.backgroundColor = "purple";
}
function turnPurple()
{
	document.getElementById('colorDiv').style.backgroundColor = "green";
}

////////////

2) one single function

<div>
	<button onclick="changeColor("purple");>purple</button>
	<button onclick="changeColor("green");">green</button>
</div>

include this script:

function changeColor(color)
{
	document.getElementById('colorDiv').style.backgroundColor = color
}


/////////


3) event handler

<div>
	<button onclick="changeColorEvnet(event);">purple</button>
	<button onclick="changeColorEvnet(event);">green</button>
</div>

include this script:

function changeColorEvnet(e)
{
	var trigger = e.srcElement;
	document.getElementById('colorDiv').style.backgroundColor =  trigger.innerHTML.toLowerCase();
}
//using the event aragument,this functions turns into a event listener.
//the color to be changed is referenced by the text(innerHTML) of the button 
//lower case is required for color to be recognised.


///////////


4)jquery


<div>
	<button class="jQButton">purple</button>
	<button class="jQButton">green</button>
</div>

include this script:

$(document).ready(function(){
	$(".jQButton").click(function(){
		$("#colorDiv").css("background-color", this.innerHTML.toLowerCase());
	});
});

//put the custom class jQButton inside each button.
//when documnet is ready, using $(document).ready(
//excute this:
//find all elements with the "jQButton"class , using $(".jQButton")
//then if the button is clicked, execute this:
// find the element with the id: colorDiv using "#colorDiv"
// set its css color to the current class's innerHTML! using the "this." keyword

//the custom class can inherit properties of the html element itself
